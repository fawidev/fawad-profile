---
import { Image } from "astro:assets";
import type { HeaderProps } from "@types";

type Props = HeaderProps;

const { siteLogo, navLinks } = Astro.props;
---

<header
  class="sticky top-0 z-50 bg-gradient-to-r from-slate-900/90 via-blue-900/90 to-slate-900/90 backdrop-blur-xl border-b border-primary/20 font-mono text-sm terminal-header"
>
  <div class="max-w-6xl mx-auto px-4 py-3">
    <!-- Terminal window chrome -->
    <div class="flex items-center justify-between mb-2">
      <div class="flex items-center gap-2">
        <div class="flex gap-1.5">
          <div class="w-3 h-3 rounded-full bg-red-400/70"></div>
          <div class="w-3 h-3 rounded-full bg-yellow-400/70"></div>
          <div class="w-3 h-3 rounded-full bg-primary/70"></div>
        </div>
        <span class="text-neutral/60 text-xs ml-2">fawad@dev ~ %</span>
      </div>
      <div class="hidden sm:flex items-center gap-2 text-xs">
        <div class="w-2 h-2 bg-primary rounded-full animate-pulse"></div>
        <span class="text-primary">online</span>
        <span class="text-neutral/60">|</span>
        <span class="text-primary-light">remote-ready</span>
      </div>
    </div>
    
    <!-- Terminal content -->
    <div class="flex items-center justify-between">
      <div class="flex items-center gap-3">
        <span class="text-primary">$</span>
        <a href="/" aria-label="Home link" class="group flex items-center gap-2 hover:text-primary-light transition-colors">
          <Image
            class="rounded border border-primary/30 group-hover:border-primary-light/50 transition-colors"
            src={siteLogo}
            width="24"
            height="24"
            alt="fawad"
          />
          <span class="text-primary-light font-medium">./fawad</span>
        </a>
        <span class="text-neutral/60">--skills</span>
        <div class="hidden lg:flex items-center gap-1 text-xs">
          <span class="text-purple-300">elixir</span>
          <span class="text-neutral/60">|</span>
          <span class="text-blue-300">python</span>
          <span class="text-neutral/60">|</span>
          <span class="text-yellow-300">javascript</span>
        </div>
      </div>

      <!-- Terminal navigation -->
      <div class="flex items-center gap-1">
        <span class="text-neutral/60 hidden sm:block">&&</span>
        <button
          type="button"
          id="menu-button"
          class="text-primary hover:text-primary-light transition-colors sm:hidden"
          aria-expanded="false"
          aria-controls="main-menu"
        >
          <span class="text-sm">[menu]</span>
        </button>
        
        <nav
          class="absolute top-full left-0 right-0 mt-1 bg-black/95 border border-green-400/30 mx-4 rounded hidden sm:static sm:bg-transparent sm:border-0 sm:block sm:mx-0"
          id="main-menu"
        >
          <ul class="gap-1 sm:flex p-2 sm:p-0">
            {
              navLinks.map((link) => (
                <li class="relative">
                  <a
                    class="nav-item terminal-link group flex items-center gap-1 px-2 py-1 text-xs hover:text-primary-light transition-colors hover:bg-primary/10 rounded relative"
                    href={link.href}
                  >
                    <span class="text-primary opacity-0 group-hover:opacity-100 transition-opacity">></span>
                    <span>{link.text.toLowerCase()}</span>
                    <!-- Active indicator -->
                    <div class="absolute bottom-0 left-0 right-0 h-0.5 bg-primary-light opacity-0 transition-opacity duration-300"></div>
                  </a>
                </li>
              ))
            }
          </ul>
        </nav>
      </div>
    </div>
  </div>
</header>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Toggle mobile menu
    const button = document.querySelector("#menu-button");
    const menu = document.querySelector("#main-menu");
    const navItems = document.querySelectorAll("#main-menu > ul > li > a");

    const toggleMenu = () => {
      menu?.classList.toggle("hidden");
      const isHidden = menu?.classList.contains("hidden");
      button?.setAttribute("aria-expanded", `${!isHidden}`);
    };

    button?.addEventListener("click", toggleMenu);
    navItems.forEach((item) => {
      item?.addEventListener("click", toggleMenu);
    });

    // Update navigation based on scroll position with Intersection Observer
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            // Clear all active states first
            navItems.forEach((item) => {
              const indicator = item.querySelector('div');
              item.classList.remove("text-primary-light");
              if (indicator) indicator.classList.remove("opacity-100");
            });
            
            // Set active state for current section
            const targetId = entry.target.id;
            navItems.forEach((item) => {
              const href = item.getAttribute("href");
              if (href === `#${targetId}`) {
                const indicator = item.querySelector('div');
                item.classList.add("text-primary-light");
                if (indicator) indicator.classList.add("opacity-100");
              }
            });
          }
        });
      },
      { threshold: 0.1, rootMargin: '0px 0px -50% 0px' },
    );

    // Find and observe sections
    const sections = document.querySelectorAll("section[id]");
    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup observer
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>

<style>
  .terminal-header {
    background: linear-gradient(135deg, rgba(15, 23, 42, 0.95) 0%, rgba(30, 58, 138, 0.95) 50%, rgba(15, 23, 42, 0.95) 100%);
    box-shadow: 0 4px 20px rgba(32, 178, 170, 0.1);
    animation: terminalGlow 4s ease-in-out infinite alternate;
  }
  
  .terminal-link.nav-item {
    position: relative;
  }
  
  .terminal-link.nav-item::before {
    content: '';
    position: absolute;
    left: 0;
    bottom: 0;
    width: 0;
    height: 1px;
    background: linear-gradient(90deg, transparent, #20B2AA, transparent);
    transition: width 0.3s ease;
  }
  
  .terminal-link.nav-item:hover::before {
    width: 100%;
  }
  
  /* Terminal cursor blink */
  .terminal-header::after {
    content: '_';
    color: #20B2AA;
    animation: blink 1s infinite;
    margin-left: 2px;
  }
  
  @keyframes terminalGlow {
    0% { 
      box-shadow: 0 4px 20px rgba(32, 178, 170, 0.1);
      border-color: rgba(32, 178, 170, 0.2);
    }
    100% { 
      box-shadow: 0 4px 30px rgba(32, 178, 170, 0.2);
      border-color: rgba(32, 178, 170, 0.3);
    }
  }
  
  @keyframes blink {
    0%, 50% { opacity: 1; }
    51%, 100% { opacity: 0; }
  }
  
  /* Responsive terminal */
  @media (max-width: 640px) {
    .terminal-header {
      font-size: 12px;
    }
  }
</style>
