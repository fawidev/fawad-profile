---
import type { HeroProps } from "@types";
type Props = HeroProps;

const { name, specialty, summary, email, tagline } = Astro.props;
---

<section class="py-24 md:py-32 relative overflow-hidden" id="hero">
  <!-- Floating developer icons -->
  <div class="absolute inset-0 overflow-hidden pointer-events-none">
    <div class="floating-icon absolute top-20 left-10 text-primary/20 text-4xl">üíª</div>
    <div class="floating-icon absolute top-32 right-20 text-primary/15 text-3xl">üåç</div>
    <div class="floating-icon absolute top-48 left-1/4 text-primary/10 text-2xl">‚ö°</div>
    <div class="floating-icon absolute bottom-40 right-10 text-primary/20 text-4xl">üöÄ</div>
    <div class="floating-icon absolute bottom-60 left-20 text-primary/15 text-3xl">‚òï</div>
    <div class="floating-icon absolute top-60 right-1/3 text-primary/10 text-2xl">üí°</div>
  </div>
  
  <!-- Typing effect for name -->
  <div class="text-center relative z-10">
    <div class="mb-2 flex justify-center items-center gap-2">
      <span class="text-primary text-xl">></span>
      <span class="typing-cursor text-white">_</span>
    </div>
    
    <h1 class="mb-1.5 font-serif text-7xl font-bold tracking-tightest text-white sm:text-8xl md:mb-0 md:text-9xl hero-name text-center relative">
      {name}
      <div class="absolute -top-4 -right-4 text-primary/30 text-2xl rotation-pulse">‚öôÔ∏è</div>
    </h1>
    
    <p class="mb-6 font-serif text-4xl leading-[46px] font-bold tracking-tighter text-primary sm:text-5xl md:text-6xl hero-specialty text-center relative">
      {specialty}
      <div class="absolute -top-2 -left-4 text-primary-light/40 text-xl pulse-glow">‚ú®</div>
    </p>
    
    <div class="flex justify-center items-center gap-4 mb-4">
      <div class="flex gap-1">
        <div class="w-2 h-2 bg-green-400 rounded-full animate-pulse"></div>
        <div class="w-2 h-2 bg-yellow-400 rounded-full animate-pulse" style="animation-delay: 0.2s"></div>
        <div class="w-2 h-2 bg-red-400 rounded-full animate-pulse" style="animation-delay: 0.4s"></div>
      </div>
      <div class="text-lg italic text-primary-light hero-tagline font-mono relative h-8 flex items-center justify-center">
        <div id="rotating-code" class="code-display">
          <span class="text-purple-400">IO.inspect</span>(<span class="text-yellow-300">"{tagline}"</span>)
        </div>
      </div>
    </div>
    
    <p class="mb-12 text-base font-normal text-neutral md:text-lg max-w-4xl mx-auto text-center hero-summary leading-relaxed">
      {summary}
    </p>

    <div class="flex flex-col sm:flex-row gap-4 justify-center items-center">
      <a
        class="group inline-block rounded-full bg-gradient-to-r from-primary to-primary-light px-8 py-4 text-sm leading-5 font-medium text-white hover:shadow-2xl hover:shadow-primary/50 transition-all duration-300 hero-cta relative overflow-hidden"
        href={`mailto:${email}`}>
        <span class="relative z-10 flex items-center gap-2">
          <span>ü§ù</span> Let's Code Together
        </span>
        <div class="absolute inset-0 bg-gradient-to-r from-primary-light to-primary opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
      </a>
      <a
        class="group inline-block rounded-full border-2 border-primary text-primary px-8 py-4 text-sm leading-5 font-medium hover:bg-primary hover:text-white transition-all duration-300 hero-cta-secondary relative overflow-hidden"
        href="#journey">
        <span class="flex items-center gap-2">
          <span>üó∫Ô∏è</span> Explore My Journey
        </span>
      </a>
    </div>
    
    <!-- Status indicator -->
    <div class="mt-8 flex justify-center">
      <div class="flex items-center gap-3 bg-black/30 backdrop-blur-sm border border-primary/30 rounded-full px-6 py-3">
        <div class="w-3 h-3 bg-green-400 rounded-full animate-pulse shadow-lg shadow-green-400/50"></div>
        <span class="text-sm text-neutral font-medium">Available for Remote Projects</span>
        <span class="text-xs text-primary">üåç Global</span>
      </div>
    </div>
  </div>
</section>

<style>
  .floating-icon {
    animation: float 6s ease-in-out infinite;
  }
  
  .floating-icon:nth-child(2n) {
    animation-delay: -2s;
  }
  
  .floating-icon:nth-child(3n) {
    animation-delay: -4s;
  }
  
  .typing-cursor {
    animation: blink 1s infinite;
  }
  
  .rotation-pulse {
    animation: rotationPulse 3s ease-in-out infinite;
  }
  
  .pulse-glow {
    animation: pulseGlow 2s ease-in-out infinite;
  }
  
  .hero-name {
    opacity: 0;
    animation: typeWriter 1.5s ease-out 0.5s forwards;
  }
  
  .hero-specialty {
    opacity: 0;
    animation: slideInFromRight 1s ease-out 1.8s forwards;
  }
  
  .hero-tagline {
    opacity: 0;
    animation: fadeInUp 0.8s ease-out 2.5s forwards;
  }
  
  .code-display {
    opacity: 0;
    animation: fadeInUp 0.8s ease-out 2.5s forwards;
    transition: all 0.5s ease-in-out;
  }
  
  .hero-summary {
    opacity: 0;
    animation: fadeInUp 0.8s ease-out 3s forwards;
  }
  
  .hero-cta, .hero-cta-secondary {
    opacity: 0;
    animation: bounceIn 0.8s ease-out 3.5s forwards;
  }
  
  .hero-cta:hover {
    transform: translateY(-4px) scale(1.05);
    box-shadow: 0 15px 35px rgba(32, 178, 170, 0.4);
  }
  
  .hero-cta-secondary:hover {
    transform: translateY(-4px) scale(1.05);
    box-shadow: 0 15px 35px rgba(32, 178, 170, 0.2);
  }
  
  @keyframes float {
    0%, 100% { transform: translateY(0px) rotate(0deg); }
    25% { transform: translateY(-20px) rotate(5deg); }
    50% { transform: translateY(-10px) rotate(-5deg); }
    75% { transform: translateY(-15px) rotate(3deg); }
  }
  
  @keyframes blink {
    0%, 50% { opacity: 1; }
    51%, 100% { opacity: 0; }
  }
  
  @keyframes rotationPulse {
    0%, 100% { transform: rotate(0deg) scale(1); }
    50% { transform: rotate(180deg) scale(1.2); }
  }
  
  @keyframes pulseGlow {
    0%, 100% { opacity: 0.4; transform: scale(1); }
    50% { opacity: 0.8; transform: scale(1.2); }
  }
  
  @keyframes typeWriter {
    0% { opacity: 0; width: 0; }
    50% { opacity: 1; width: 0; }
    100% { opacity: 1; width: 100%; }
  }
  
  @keyframes slideInFromRight {
    0% { opacity: 0; transform: translateX(100px); }
    100% { opacity: 1; transform: translateX(0); }
  }
  
  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(30px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
  
  @keyframes bounceIn {
    0% {
      opacity: 0;
      transform: scale(0.3);
    }
    50% {
      opacity: 1;
      transform: scale(1.05);
    }
    70% {
      transform: scale(0.9);
    }
    100% {
      opacity: 1;
      transform: scale(1);
    }
  }
  
</style>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Rotating code snippets
    const codeSnippets = [
      { lang: 'elixir', code: 'IO.inspect', tagline: 'Concurrent solutions for complex problems', color: 'text-purple-400' },
      { lang: 'python', code: 'print', tagline: 'Turn their vision into reality', color: 'text-blue-400' },
      { lang: 'javascript', code: 'console.log', tagline: 'Connecting globally, coding locally', color: 'text-green-400' }
    ];
    
    let currentIndex = 0;
    
    function updateCode() {
      const codeElement = document.getElementById('rotating-code');
      if (!codeElement) {
        console.log('Code element not found');
        return;
      }
      
      const snippet = codeSnippets[currentIndex];
      console.log('Updating to:', snippet.code); // Debug log
      
      // Add fade out
      codeElement.style.opacity = '0.3';
      
      setTimeout(() => {
        codeElement.innerHTML = `<span class="${snippet.color}">${snippet.code}</span>(<span class="text-yellow-300">"${snippet.tagline}"</span>)`;
        // Fade back in
        codeElement.style.opacity = '1';
      }, 250);
      
      currentIndex = (currentIndex + 1) % codeSnippets.length;
    }
    
    // Start rotation after a delay
    setTimeout(() => {
      console.log('Starting code rotation'); // Debug log
      updateCode(); // Show first one immediately
      setInterval(updateCode, 5000); // Change every 5 seconds
    }, 4000);
  });
</script>
